☆☆☆ JSP기본
	URL : 웹 브라우저의 주소줄에 표시되는 것   (http://)(www.11st.com/html)/(category/1.html)?(xzone=ctgr1^html)
										      프로토콜/       서버이름      /       경로      /    쿼리 문자열
	
1.웹브라우저(사용자) : naver.com의 IP주소요청
2.DNS              : IP주소 응답
	//DNS? : 네트워크에서 도메인이나 호스트이름을 숫자로된 IP주소로 해석해주는 네트워크서비스
3.웹브라우저        : http://naver.com 요청
4.웹서버					  : HTML로 응답
5.웹브라우저		   	: HTML화면 보여짐

◇웹브라우저와 웹서버는 IP주소를 이용해서 연결하기 때문에 도메인 이름을 IP주소로 변환할 필요가 있다
이때 사용하는것이 DNS이다 IP주소를 받으면 웹브라우저는 3번처럼 IP주소를 이용해서 웹서버에 연결한 뒤
URL에 해당하는 웹페이지를 요청하고 웹페이지의 응답을 받게 된다

◇IP : 사용자가 웹서버에 연결하러면 웹서버가 실행중인 컴퓨터 주소를 알아야 하는데 이를 IP주소라 한다
인터넷을 통해 연결되는 컴퓨터들도 고유 주소값인 IP주소를 갖고있다 그런데 IP주소는 외우기 쉽지않으므로
"naver.com"같이 사람이 기억하기 좋은 [도메인] 이름을 사용한다

◇포트(Port) : 한개의 컴퓨터에는 웹서버 프로그램만 실행되는것이 아니다 웹서버 프로그램과함께
동영상을 제공해주는 스트리밍서버 프로그램도 실행될수있고 채팅서버 프로그램도 실행될 수 있다
그러므로 IP주소만으로는 컴퓨터의 어떤 서버프로그램을 실행할지 알 수 없다
이런 이유로 각 서버프로그램은 클라이언트가 연결할 때 다른 서버프로그램과 구분할 수 있도록
[포트] 라는것을 사용한다 

◇렌더링 : 웹서버가 응답한 HTML문서로부터 알맞은 화면을 생성하는 과정

        ..............................................................................

☆☆☆ JSP 구성요소 ☆☆☆
		
		1. 디렉티브(Directive)
		2. 스크립트 요소 : 스크립트릿 , 표현식 , 선언부
		3. 표현언어(Expression Language)
		4. 기본 객체(Implicut Object)
		5. 정적인 데이터
		6. 표준 액션 태그(Action Tag)
		7. 커스텀 태그(Custom Tag)와 표준 태그 라이브러리(JSTL)

        ..............................................................................

◇디렉티브(Directive)

		1.page : JSP페이지에 대한 정보를 지정한다 JSP가 생성하는 문서의 타입,출력 버퍼의 크기,에러페이지등..
			//contentType , inport , session , buffer , autoFlush , errorPage ...
		2.taglib : JSP페이지에서 사용할 태그 라이브러리를 지정한다
		3.include : JSP페이지의 특정 영역에 다른 문서를 포함시킨다

◇스크립트 요소

		1.표현식 : 값을 출력한다
		2.스크립트릿 : 자바코드를 실행한다
		3.선언부 : 자바 메서드(함수)를 만든다

◇표현 언어 : ${} 스크립트코드를 사용하는것보다 간결하고 이해하기 좋게 만들어줌
						 특별한 이유가 없는 한 표현언어를 주로 사용

◇기본 객체 
	☆request      : 클라이언트의 요청 정보를 저장한다
	☆session      : HTTP세션 정보를 저장한다
	response       : 응답 정보를 저장한다 
	out            : JSP페이지가 생성하는 결과를 출력할 때 사용하는 출력 스트림 : 때때로 <%= %>보다 편할때가 있다
	pageContext    : JSP페이지에 대한 정보를 저장한다
	application    : 웹어프릴케이션에 대한 정보를 저장한다
	config    		 : JSP페이지에 대한 설정 정보를 저장한다
	exception  		 : 익셉션 객체 , 오직 에러 페이지에서만 사용
	page 					 : JSP페이지를 구현한 자바 클래스 인스턴스

◇표준액션태그와 태그라이브러리
1.액션태그 : <jsp:include>
2.커스텀태그 : JSP를 확장시켜주는 기능 액션태그와의 차이점은 개발자가 직접 개발해주어야 한다
3.JSTL : 커스텀태그 중에서 자주 사용하는것들을 별도로 표준화한 태그 라이브러리

        ..............................................................................

☆☆☆ request 객체의 요청 파라미터관련 메서드 ☆☆☆

		◇getParameter(String name) : 리턴타입 = String
			이름이 name인 파라미터의 값을 구한다 존재하지 않을경우 null을 리턴

		◇getParameterValues(String name) : 리턴타입 = String[]
			이름이 name인 [모든]파라미터의 값을 배열로 구한다 존재하지 않을경우 null을 리턴

		◇getParameterNames()
			웹 브라우저가 전송한 파라미터의 이름 목록을 구한다

		◇getParameterMap()
			웹 브라우저가 전송한 파라미터의 맵을 구한다
			맵은 <파라미터 이름 , 값> 쌍으로 구성된다    [컬렉션 프레임워크에 키와 밸류 쌍과 같은듯!]


☆☆☆ JSP 기본 객체의 속성(Attribute) 사용하기 ☆☆☆
			
			4개의 기본객체[pageContext][request][response][application]은 속성을 갖는다!!
				각 기본객체가 존재하는 동안 기본객체의 속성을 사용할 수 있다
					속성은 JSP 페이지 사이에서 정보를 주고받거나 공유하기 위한 목적으로 사용된다

			속성의 이름은 String타입이지만 값은 모든 클래스 타입이 올 수 있다

		◇setAttribute(String name , Object value) : 리턴타입 void
			이름이 name인 속성의 값을 value로 지정한다

		◇getAttribute(String name)                : 리턴타입 Object
			이름이 name인 속성의 값을 구한다    		속성이 존재하지 않는다면 null리턴

		◇removeAttribute(String name)             : 리턴타입 void
			이름이 name인 속성을 삭제한다

		◇getAttributeNames()                      : 리턴타입 Enumeration<String>
			속성의 이름 목록을 구한다               pageContext객체는 이 메서드를 제공하지 않음

====================================================================================================

☆☆☆ 데이터를 다른페이지로 넘기는 방법 3가지
   
	  1.세션 : ☆☆☆ 사용자의 정보가 암호화되서 넘어감 ☆☆☆
	  	  
		  ◎key값과 value로 한 쌍 : session.setAttribute("name", name); 
	                          
	      ◇setAttribute()는 오브젝트 타입이므로 어떤타입이던지 받을 수 있다
	        그러나 받는쪽에서 다른타입으로 받을 경우 다운캐스팅 해줘야함
	            String name1 = (String) session.getAttribute("name1");
	
	    ◎세션 유지 시간
	        session.setMaxInactiveInterval(10)  : //10초간 세션 유지
        
				..............................................................................

    2.파라미터를 쿼리문자열을 통해서 
					ex) <a href="파일이름.jsp?name=홍태화 & address=김포">링크</a>
                    response.sendRedirect("파일이름.jsp?id=${}");

			  ..............................................................................
   
	  3.<JSP:forward> 액션태그를 이용
             <jsp:forward page="파일이름.jsp">
             <jsp:param value="mmmm" name="id"/>
             </jsp:forward> 
                   param을 통해서 id값을 mmmm으로 변경해서 넘겨줄 수도 있음
                
====================================================================================================

☆커넥션 풀을 사용해보자

  Connection con; // 데이터베이스에 접근할 수 있도록 설정
	PreparedStatement pstmt; // 데이터베이스에서 쿼리를 실행시켜주는 객체
	ResultSet rs;   //db의 테이블의 결과를 리턴받아 자바에 저장시켜주는 객체

	데이터베이스에 접근 메소드 getCon으로 설정
	public void getCon() {
		
		//커넥션 풀을 이용하여 데이터베이스에 접근
		try {
			
      //외부에서 데이터를 읽어들여야 하기에 Context개념 사용
			Context initctx = new InitialContext();
			
      //톰캣에 서버정보를 담아놓은곳으로 이동
			Context envctx = (Context) initctx.lookup("java:comp/env");
		
    	//데이터 소스 객체 생성
			DataSource ds = (DataSource) envctx.lookup("jdbc/pool");
		
    	//데이터 소스를 기준으로 커넥션 연결
			con = ds.getConnection();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
====================================================================================================

☆Cookie : 서버 측 정보가 내 컴퓨터에 저장되는 파일 다음 접속할 때 파일을 들고 접속하면
			쉽게 접속 가능

====================================================================================================

☆☆☆EL태그     :    ${}

	◆표현식으로 attribute 나 parameter 등을 jsp파일에서 출력할 용도로 사용하는 언어
	◆attribute 를 출력할 때는 ${어트리뷰트 이름}으로 출력
	◆파라미터는 ${param.이름} 또는 ${paramValue.이름[인덱스]}형태로 출력

    ◆◆◆산술연산도 가능	
		request.setAttribute("i",3);
		${i+4}   //7
		${i>3}   //true

====================================================================================================

☆JSTL : jsp 스탠다드 태그 라이브러리
	-태그로 자바코드를 사용할 수 있게 해줌

                              접두어
	◆코어태그         :        c                      코어태그만 알아도 됨
	◆XML              :        x
	◆국제화           :        fmt
	◆데이터베이스     :        sql
	◆함수             :        fn

		●코어태그 종류
▶ <c:catch>  : 		예외를 잡아내는 역할
▶ <c:choose>  : 	자바의 switch문과 같지만 조건문에 문자열비교도 가능하고 쓰임의 범위가 넓다
▶ <c:if>  : 		if문  
▶ <c:import>  : 	웹어플리케이션 내부의 자원접근은 물론이고 http ,ftp같은 외부에있는 자원도 가져옴
▶ <c:forEach>  : 	forEach문 
▶ <c:param>  :  	inport태그의 URL뒤에 파라미터로 붙여서 사용할수있다
▶ <c:set>  : 		setAttribute() 같은 역할 
▶ <c:remove>  : 	removeAttribute() 같은 역할
▶ <c:redirect>  : 	response.sendRedirect() 같은 역할
▶ <c:out>  : 		jsp의 표현식을 대체하는것으로 많이 사용됨

====================================================================================================

☆ 서블릿의 이해 [Model-2] [MVC patton]

     ◆클라이언트(홈페이지)    ◆view(jsp)      ◆Controller(서블릿(자바파일))        ◆ Model(DAO)          ◆ DB              

1. ◆클라이언트(홈페이지)가 요청을한다
2. ◆Controller(서블릿(자바파일))이 요청을 받아서 Model에 넘겨줌
3. ◆Model(DAO)이 DB에 접근해서 프로세스 진행하고 결과를 
4. ◆Controller(서블릿(자바파일))에 넘겨줌 
5. ◆Controller(서블릿(자바파일))에서 나온결과를 
		model-1에서는 request.getParameter에 담아서 view(jsp) 넘기지만
		model-2에서는 RequestDispatcher에 담아서 view(jsp)에 넘김
6. ◆view(jsp)는 JSTL,EL태그등을 사용해서 홈페이지에 결과를 보여줌

