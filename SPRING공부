★★★★★★★★  스프링프레임워크  ★★★★★★★★★
 
  ◆◆◆핵심 기술         : DI , AOP , Event ...
    ◆◆웹 기술          : MVC , WebFlux 
     ◆데이터 접근 기술   : JDBC , 트랜잭션 , ORM , XML 
     ◆기술 통합         : 캐시 , 이메일 ,원격접근 ,스케줄링
     ◆테스트            : 스프링기반 테스트 지원
     ◆언어              : 코틀린 , 그루비


◆IoC 스프링 컨테이너 : 스프링에서 객체를 생성하고 조립하는 컨테이너로 
                        컨테이너를 통해 생성된 객체를 빈(bean)이라 부른다   확장자는 xml

해석) xml문서를 이용해서 만들어진 객체들을 담고있는게 컨테이너이다
     그 객체들을 Object라 하지않고 bean이라 부른다        Object = bean
    
자바폴더 : 자바코딩 파일들이 있는곳
resources 폴더 : xml(스프링 설정 파일) 또는 프로퍼티 파일등이 관리되는 폴더
pom.xml : 필요한 라이브러리들을 땡겨오는 파일

객체주입 방법
1.생성자를 이용
2.setter를 이용
3.List타입을 이용
4.Map타입을 이용
 
=============================================================================================================

1.스프링 설정 파일 : resources아래있는 xml파일 ex) applicationContext.xml

2.스프링 설정 파일을 이용하여 스프링 컨테이너를 만듬
GenericXmlApplicationContext ctx = new GenericXmlApplicationContext("classpath:applicationContext.xml");

3.컨테이너안에있는 객체들을 getBean을 이용하여 가져와서 t에 넣어줌
TranspotationWalk t = ctx.getBean("tWalk",TranspotationWalk.class);

                                   -----------------------------

스프링설정파일안에는 다양한 기능을 가진 객체들이있는데(서비스에관련된객체,데이터베이스에관련된객체 등등) 기능별로 분리할 수 있다
appCtx1.xml (서비스기능)          appCtx2.xml (데이터베이스기능)           appCtx3.xml (등등)    appCtx~~~~~~.xml

                                   -----------------------------

분리한 컨테이너들을 필요한 만큼만 사용하고 싶다면 문자열 배열로 받을 수 있다
String[] appCtxs = {"classpath:appCtx1.xml","classpath:appCtx2.xml"};
배열객체를 이용해서 넣을 수 있다
GenericXmlApplicationContext ctx = new GenericXmlApplicationContext(appCtxs);

=============================================================================================================

★Bean(빈)의 설정 범위 : default는 싱글톤 설정이다
     
     ◆싱글톤 - 스프링컨테이너에서 생성된 빈객체의 경우 동일한 타입에 대해서는 기본적으로 한 개만 생성되며
               getBean()메서드로 호출될 때 동일한 객체가 반환된다  [이미 만들어진 객체를 호출만하는 것이다]
     
               자바에서는 new 클래스이름() 하면 객체를 만들때마다 다른객체가 생성되는것에 반대되는 개념이다

     ◆프로토타입 - 싱글톤 범위와 반대되는 개념이다
                   호출 할 때 마다 동일한 데이터 타입이지만 다른객체가 생성되게 하고 싶다면 빈 객체를 정의할 때
                   <bean id="~" class="~.~" scope="prototype"> 을 설정해주면 된다

=============================================================================================================

★★★ 의존객체 자동주입이란? ★★★
     ◆ 스프링설정파일에서 의존객체를 주입할 때 <constructor-org> 또는 <property>태그로 의존 대상객체를 명시하지 않아도 스프링 컨터에너가 자동으로
        필요한 의존 대상 객체를 찾아서 의존 대상 객체가 필요한 객체에 주입해주는 기능

     ◆ 구현 방법
          - @ Autowired : ㅇ스프링 컨테이너 안에서 주입하려고 하는 객체의 [타입이 일치]하는 객체를 자동으로 주입한다      
                          ㅇ생성자 , 메서드 , 프로퍼티에 쓸 수 있다
                          ㅇ프로퍼티,메서드에 Autowired를 할 때에는 항상 default생성자를 하나 넣어주어야 한다
             
          - @ Resource  : ㅇ스프링 컨테이너 안에서 주입하려고 하는 객체의 [이름이 일치]하는 객체를 자동으로 주입한다       
                          ㅇ생성자를 제외한 메서드,프로퍼티에 쓸 수 있따 그러므로 항상 default생성자를 하나 넣어 주어야 한다

                 두가지 어노테이션을 이용해서 쉽게 구현할 수 있다

                                   -----------------------------

★★★ 의존객체 선택이란? ★★★★   :  다수의 빈객체 중 의존 객체의 대상이 되는 객체를 선택하는 방법
    
     ◆ 동일한 객체가 2개 이상인 경우 스프링컨테이너는 자동 주입 대상 객체를 판단하지 못해서 Exception을 발생시킨다
        xml파일 bean태그 안에 <qualifier value="~"/> 를 써주고  자바에는 @Autowired 아래에 @qualifier("~")를 작성해 주면 된다
     
     ◆ @Inject : @Autowired와 같지만 의존대상객체가 없어도 익셉션을 피할수있다 
                 그러나 주입객체를 만들지않고 주입한다는 명령한다는 코드를 짜는건 말이안되므로 잘 쓰이지 않는다 @Autowired를 쓰자!
                 @Inject아래에 @Named(value="~")를 쓰면 다수의 빈 객체중 의존객체의 대상이되는 객체를 명시적으로 선택할 수 있다

=============================================================================================================

★★★ 스프링컨테이너와 bean객체의 생명주기(Life Cycle) ★★★

     ◆ 스프링컨테이너와 bean객체의 생성시점은 같다!
     ◆ ctx.close() 를 써서 자원을 해제하면 컨테이너와 bean객체가 소멸된다
          ㅇ 즉 빈객체의 생명주기는 스프링컨테이너의 생명주기와 같이 한다

     ◆빈객체가 생성될때와 소멸될때 특정한 작업을 할 수 있는데 예를들어 생성될때 DB와 연결한다던지 인증을한다던지 
       소멸될때 DB와 연결을 끊는 작업을 2가지 방법으로 할 수있다

       ㅇ인터페이스 이용 방법ㅇ
       InitalizingBean 인터페이스에서 제공하는 afterPropertiesSet()메서드 와
       DisposableBean  인터페이스에서 제공하는 destroy()메서드를 implements 해서 생성,소멸시 수행할 작업 코드를 작성하면 된다
       
       ㅇ메서드 이용 방법ㅇ
       스프링설정파일 bean태그안에 
       <bean id="~" class="~"        init-method="~"  destroy-method="~" /> 를 명시해 주고
       자바서비스 파일에서 "~" 와 똑같은 메서드를 생성해주고 수행할 작업 코드를 작성하면 된다
      
=============================================================================================================

위에까진 xml을 이용해서 스프링설정파일을 만들고 컨테이너를만들어서 사용했다면

     ★★★★★ 어노테이션을 이용한 스프링 설정 ★★★★★

     ◆xml파일을 이용하지않고 자바파일에서 어노테이션을 사용하여 
       객체를만들기,의존설정,주입 등을 하는 컨테이너를 만든다
                 
                                   -----------------------------

◆실행방법

1. 설정파일로 하고싶은 클래스를 만들고 public class 클래스이름 {} 위에 @configuration 을 적어주면 
   이 클래스는 스프링컨테이너로서 역할을 할 수 있다

2.Bean객체를 메서드로 이용해서 만드는 법!
    
          ◆xml을 이용해서 객체 만든것과 비교해보자 1
     -스프링-
               <bean id="a" class="~.~.b">
               </bean>
      -자바-
          @Bean    ;리턴타입     id
          public       b         a(){
                    return new b();                  //소괄호 써줘야함!
          }

                                   -----------------------------

          ◆xml 생성자를 이용해서 객체 만든것과 비교해보자 2
     -자바-
               <bean id="a" class="b">
                <constructor-arg ref="c"></constructor-arg>
               </bean>
     -스프링-
          @Bean
          public 반환타입["b"] 메서드이름["a"](){
                    return new "b"("c"());             
          }

                                   -----------------------------

           ◆xml을 이용해서 객체 만든것과 비교해보자 3
     -자바-
               <bean id="dataBaseConnectionInfoDev" class="ems.memver.DataBaseConnectionInfo">
                    <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe"/>
                    <property name="userId" value="scott"/>
                    <property name="UserPw" value="tiger"/>
               </bean>
     -스프링-
          @Bean         ;클래스이름             id
          public DataBaseConnectionInfo dataBaseConnectionInfoDev(){
                    DataBaseConnectionInfo infoDev = new DataBaseConnectionInfo();
                         infoDev.setJdbcUrl ("jdbc:oracle:thin:@localhost:1521:xe");
                         infoDev.setUserId ("scott");
                         infoDev.setUserPw ("tiger");
                    return infoDev;
          }

                    ◆만약 <property ~>안에 <list>구조가 있다면 ArrayList<>등으로 받아준다 </property>
                    ◆만약 <property ~>안에 <map>구조가 있다면 HashMap<>등으로 받아준다    </property>

3. 실행 자바파일에 가서
xml사용방식인
GenericXmlApplicationContext ctx = new GenericXmlApplicationContext("설정 자바파일");
을 사용하지않고
AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext("classpath:applicationContext.java");
을  사용한다!

=============================================================================================================
